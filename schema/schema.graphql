scalar Date

type User {
  id: Int!
  email: String!
  password: String!
}

type Book {
  id: Int!
  title: String!
  author: String!
  changes: [BookChange!]!
  createdAt: Date!
  updatedAt: Date!
}

type BookChange {
  id: Int!
  bookId: Int!
  status: BookStatus!
  yearOfPublication: Int!
  genres: [Genre]
  rating: Int!
  createdAt: Date!
  updatedAt: Date!
  createdBy: User!
}

enum BookStatus {
  NEW
  EDITED
  DELETED
}

type Genre {
  id: Int!
  name: Genres!
}

enum Genres {
  FANTASY
  SCIENCE_FICTION
  HORROR
  ROMANCE
  THRILLER
  MYSTERY
  WESTERN
  DYSTOPIA
  MEMOIR
  BIOGRAPHY
  PLAY
  POETRY
  HISTORY
  TRAVEL
  CHILDRENS
  YOUNG_ADULT
  OTHER
}

# type BikeRentQueryResposne {
#   bikeModel: String!
#   customerName: String!
#   rentDate: Date!
#   paidTime: Int! # hours
# }

type LogInResponse {
  code: String!
  success: Boolean!
  message: String!
  # token: String
  user: User
}

type FindBooksResponse {
  code: String!
  success: Boolean!
  message: String!
  books: [Book]
}

type GetBookResponse {
  code: String!
  success: Boolean!
  message: String!
  book: Book
}

type GetAllBooksResponse {
  code: String!
  success: Boolean!
  message: String!
  books: [Book]
}

type Query {
  logIn(email: String!, password: String!): LogInResponse
  getAllFreeBooks: GetAllBooksResponse
  getBookByIdAndDate(id: Int!, stringDate: String!): GetBookResponse
  findBooksByTitle(title: String!): FindBooksResponse
  findBooksByAuthor(author: String!): FindBooksResponse
}

type BookMutationResponse {
  code: String!
  success: Boolean!
  message: String!
  book: Book
}

type Mutation {
  addBook(title: String!, author: String!, yearOfPublication: Int!, rating: Int!, genres: [Genres]!): BookMutationResponse
  deleteBook(id: Int!): BookMutationResponse
  # addCustomer(name: String, surename: String): AddCustomerMutationResponse
  # rentABike(bikeId: ID, clientId: ID, rentTime: Int): RentABikeMutationResponse
}